---------------------------------------------------------------------
1. Describe in a high level the solution you have in mind
---------------------------------------------------------------------
Basically I will build a simple HTTP server to expose a small API for the required operations. 
Inside that server there will be some routing module that is responsible for all of the 
http related work and merely delegating work based on the requests to their respective services within the system.

There will be a few services/modules to abstract away data work and more businessy logic.
This includes modules for handling follows, listened, music resources, and modules to handle auxilary data structures
that dont necessarily handle the data that is coming in as is. One such auxilary will be a small import module which builds/
manipulates indices that are tailored for faster and easier to implement recommendation servicing, since this system should be
built to maximize discovery of new songs. This could be say in the example of the scope of this assignment, some hashing for 
music tag information relating to a user, or the music itself.

Last but not least, there will be a RecommendationEngine. For this engine I will try to build it in such a way that it is
configurable and sort of plug and play, where I can specify rules that the system can use to generate the recommendations. So I
should be able to add business rules with weights as I please, omit rules, etc.


---------------------------------------------------------------------
2. What other data could you use to improve recommendations?
---------------------------------------------------------------------
In general for a recommendation system I think it might be a good idea to have data that includes likes/dislikes, ratings, play counts 
(system wide and by individual user), user profile information (ie. age, gender, preferences), geo data for music (where is this
song played a lot, where did the song originate), time stamps for all of the data (ie. what time period is this song getting hit
a lot how, and of course any survey data.




---------------------------------------------------------------------
3. Assume a more real world situation where you could have more data you 
described above, and more time to implement, could you think of a possibly more efficient way to recommend?
---------------------------------------------------------------------
There will probably have to be a bigger emphasis on grooming the data, and seperate systems for grooming that data into something
more meaningful.




---------------------------------------------------------------------
4. Assume you have more than one implementation of recommendations, 
how could you test which one is more effective using data generated by user actions?
---------------------------------------------------------------------
We could implement some sort of feedback system. 
Explicitly this could include survey like questions through the usage of the application, or more subtle surveys like I seen on rdio, "play more like this" or the opposite.
Maybe more generally, could implement an opportunity closing engine, which will take in several angles, and try to give insight on the
success of the recommendations, like did the recommendations get listened to, how many times, does this constitute a successful recommendation.
